generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ----------  ENUMS  ---------- */
enum Role {
  USER
  ADMIN
}

/* ----------  MAIN MODELS  ---------- */
model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  users     User[]
  invoices  Invoice[]
  createdAt DateTime @default(now())
}

model User {
  /* Auth.js primary key */
  id             String   @id @default(cuid())

  /* Credentials-provider fields */
  email          String   @unique
  hashedPassword String
  emailVerified  DateTime?

  /* Multi-tenant glue */
  role           Role     @default(USER)
  tenantId       String
  tenant         Tenant   @relation(fields: [tenantId], references: [id])

  /* Auth.js relations */
  accounts       Account[]
  sessions       Session[]
}

model Invoice {
  id        String   @id @default(cuid())
  number    String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
}

/* ----------  AUTH.JS SUPPORT TABLES  ---------- */
model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])

  provider          String
  providerAccountId String
  type              String

  /* OAuth token columns (nullable for credentials provider) */
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  sessionToken String   @unique
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
